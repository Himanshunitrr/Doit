{"version":3,"sources":["components/Home.js","components/Post.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Home","state","posts","axios","get","then","res","console","log","setState","data","this","postList","length","map","post","className","key","id","to","name","Component","Post","props","match","params","post_id","src","cover_pic","details","email","withRouter","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gRA4CeA,E,2MAtCbC,MAAQ,CACNC,MAAO,I,mFAEY,IAAD,OAClBC,IAAMC,IAAI,2DACPC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZP,MAAOI,EAAII,KAAKA,Y,+BAId,IACAR,EAAUS,KAAKV,MAAfC,MACFU,EAAWV,EAAMW,OACrBX,EAAMY,KAAI,SAAAC,GACR,OACE,yBAAKC,UAAU,YAAYC,IAAKF,EAAKG,IACnC,yBAAKF,UAAU,gBACb,kBAAC,IAAD,CAAMG,GAAI,IAAMJ,EAAKG,IACnB,0BAAMF,UAAU,cAAcD,EAAKK,YAO7C,yBAAKJ,UAAU,UAAf,gBAEF,OACE,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,UAAd,UACCJ,O,GAjCUS,aCoCJC,E,2MArCbrB,MAAQ,CACNc,KAAM,M,mFAEa,IAAD,OACdG,EAAKP,KAAKY,MAAMC,MAAMC,OAAOC,QACvB,IAANR,IACFA,EAAK,IAEPf,IAAMC,IAAI,2DACPC,MAAK,SAAAC,GACJ,EAAKG,SAAS,CACZM,KAAMT,EAAII,KAAKA,KAAKQ,EAAK,W,+BAK/B,IAAMH,EAAOJ,KAAKV,MAAMc,KACtB,yBAAKC,UAAU,QACb,wBAAIA,UAAU,UACXL,KAAKV,MAAMc,KAAKK,MAEnB,yBAAKO,IAAKhB,KAAKV,MAAMc,KAAKa,YAC1B,2BAAIjB,KAAKV,MAAMc,KAAKc,SACpB,uBAAGb,UAAU,MAAb,UAA0BL,KAAKV,MAAMc,KAAKe,QAG5C,yBAAKd,UAAU,UAAf,mBAGF,OACE,yBAAKA,UAAU,aACZD,O,GAhCUM,aCcJU,eAdA,SAACR,GACd,OACE,yBAAKP,UAAU,+BACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SACZ,4BACE,kBAAC,IAAD,CAAMG,GAAG,KAAT,eCaGa,E,iLAdX,OACE,kBAAC,IAAD,KACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjC,kBAAC,IAAD,CAAOkC,KAAK,YAAYC,UAAWb,W,GAR7BD,aCMEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASf,MACvB,2DCZNgB,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.b8e14749.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    posts: [ ]\r\n  };\r\n  componentDidMount() {\r\n    axios.get('https://ecell.nitrr.ac.in/events/list/2019/?format=json')\r\n      .then(res => {\r\n        console.log(res)\r\n        this.setState({\r\n          posts: res.data.data\r\n      })\r\n    })\r\n  }\r\n  render() {\r\n    const { posts } = this.state;\r\n    const postList = posts.length ? (\r\n      posts.map(post => {\r\n        return (\r\n          <div className=\"post card\" key={post.id}>\r\n            <div className=\"card-content\">\r\n              <Link to={'/' + post.id}>\r\n                <span className=\"card-title\">{post.name}</span>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        );\r\n      })\r\n    ): (\r\n      <div className=\"center\">No posts yet</div>\r\n    )\r\n    return (\r\n      <div className=\"container home\">\r\n        <h4 className=\"center\">Events</h4>\r\n        {postList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nclass Post extends Component {\r\n  state = {\r\n    post: null\r\n  }\r\n  componentDidMount() {\r\n    let id = this.props.match.params.post_id;\r\n    if (id == 22) {\r\n      id = 21;\r\n    }\r\n    axios.get('https://ecell.nitrr.ac.in/events/list/2019/?format=json')\r\n      .then(res => {\r\n        this.setState({\r\n          post: res.data.data[id - 12]\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n    const post = this.state.post ? (\r\n      <div className=\"post\">\r\n        <h2 className=\"center\">\r\n          {this.state.post.name}\r\n        </h2>\r\n        <img src={this.state.post.cover_pic} />\r\n        <p>{this.state.post.details}</p>\r\n        <p className=\"id\">Email: {this.state.post.email}</p>\r\n      </div>\r\n    ): (\r\n      <div className=\"center\">Loading post...</div>\r\n    )\r\n      \r\n    return (\r\n      <div className=\"container\">\r\n        {post}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport { Link, NavLink ,withRouter } from 'react-router-dom'\r\n\r\nconst Navbar = (props) => {\r\n  return (\r\n    <nav className=\"nav-wrapper orange darken-3\">\r\n      <div className=\"container\">\r\n        <ul className=\"right\">\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default withRouter(Navbar)\r\n","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Home from './components/Home'\nimport Post from './components/Post'\nimport Navbar from './components/Navbar'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/:post_id\" component={Post} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}